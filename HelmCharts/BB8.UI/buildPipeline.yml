resources:
  repositories:
  - repository: AspxFormsService
    type: git
    name: AspxFormsService
    trigger:
      branches:
        include:
        - main
  - repository: Pipelines
    type: git
    name: Pipelines
    trigger: none

variables:
- group: ServiceConnections
- group: Snyk
- group: ASPXFormsService
- group: AKSDeployments
- group: Artifacts
- group: Calico
- name: buildNumberPrefix
  value: Aspx.Forms.Service
- name: projectKey
  value: BB8_AspxFormsService_AYnlTnYJQKS-wUhIPRQP
- name: solution
  value: AspxFormsService.sln
- name: breakSonarQubefailure
  value: false
- name: buildConfiguration
  value: Debug
- name: workingDirectory
  value: AspxFormsService
- name: testDirectory
  value: AspxFormsService.Tests
- name: testDll
  value: AspxFormsService.Tests/bin/Debug/net7.0/AspxFormsService.Tests.dll
- name: sonarQubeConnection
  value: $(ServiceConnections.SonarQubeAspxFormsService)
- name: breakSonarQubefailure
  value: false
- name: snkyOrganizationId
  value: $(Snyk.OrgIdDevOps)
- name: kubernetesCluster
  value: $(AKSDeployments.BuildAgentsCluster)
- name: containerRegistryName
  value: presidiocontainers

parameters:

- name: dockerimagesNetCore
  type: object
  default:

  - repository: aspx-forms-service
    displayName: ASPX Forms Service
    buildContext: 'AspxFormsService/AspxFormsService'
    dockerfile: 'Pipelines/HelmCharts/AspxFormsService/DockerImages/AspxFormsService/Dockerfile'
    appdll: AspxFormsService.dll
    failOnIssues: false

- name: environments
  type: object
  default:

  - namespace: qa-agents
    valuesFile: HelmCharts/AspxFormsService/Chart/values.qa-agents.yaml
    releaseName: aspx-forms-service
    displayName: ASPX Forms Service
    continueOnError: false
    chartPath: 'HelmCharts/AspxFormsService/Chart'
    helmArgs: "--create-namespace --timeout 5m0s"

stages:
- stage: SetBuildNumber
  displayName: Set Build Number
  jobs:
  - job:
    displayName: Set Build Number
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: PowerShell@2
      displayName: Set Build Number
      inputs:
        pwsh: true
        targetType: inline
        script: Write-Host "##vso[build.updatebuildnumber]$(buildNumberPrefix)-$(Build.BuildNumber)"

- stage: RunAutomatedTests
  displayName: Run Automated Tests
  jobs:
  - job:
    displayName: Run Automated Tests
    pool:
      vmImage: windows-latest
    steps:
    - checkout: AspxFormsService
    - template: HelmCharts\_Templates\applicationTest.yml@Pipelines
      parameters:
        solution: $(solution)
        buildConfiguration: $(buildConfiguration)
        vstsFeed: $(Artifacts.FeedId)
        testDll: $(testDll)

- stage: CodeAnalysis
  displayName: Code Analysis
  jobs:
  - job:
    displayName: Run Snyk Scan
    pool:
      vmImage: windows-latest
    steps:
    - checkout: AspxFormsService
    - template: SnykScanners/_Templates/snyk.yml@Pipelines
      parameters:
        snykConnection: $(ServiceConnections.SnykAuthentication)
        solution:  ${{ variables.solution }}
        buildConfiguration: ${{ variables.buildConfiguration }}
        vstsFeed: $(Artifacts.FeedId)
        snkyOrganizationId: $(snkyOrganizationId)

  - ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
    - job:
      displayName: Run SonarQube Analysis
      pool:
        vmImage: windows-latest
      steps:
      - checkout: AspxFormsService
      - template: SonarQubeScanners/_Templates/sonarQube.yml@Pipelines
        parameters:
          sonarQubeConnection: $(sonarQubeConnection)
          solution: ${{ variables.solution }}
          buildConfiguration: ${{ variables.buildConfiguration }}
          projectKey: ${{ variables.projectKey }}
          vstsFeed: $(Artifacts.FeedId)
          breakSonarQubefailure: '${{ variables.breakSonarQubefailure }}'
          testDll: ${{ variables.testDll }}
  - ${{ else }}:
    - job:
      displayName: Run SonarQube Analysis
      pool:
        vmImage: windows-latest
      steps:
      - checkout: AspxFormsService
      - template: SonarQubeScanners/_Templates/sonarQube.yml@Pipelines
        parameters:
          sonarQubeConnection: $(sonarQubeConnection)
          solution: ${{ variables.solution }}
          buildConfiguration: ${{ variables.buildConfiguration }}
          projectKey: ${{ variables.projectKey }}
          vstsFeed: $(Artifacts.FeedId)
          breakSonarQubefailure: '${{ variables.breakSonarQubefailure }}'
          testDll: ${{ variables.testDll }}
          prId: $(System.PullRequest.PullRequestId)
          prSourceBranch: $(System.PullRequest.SourceBranch)
          prTargetBranch: $(System.PullRequest.TargetBranch)

- stage: BuildDockerImages
  displayName: Build Docker Images
  jobs:
  - ${{ each dockerimage in parameters.dockerimagesNetCore }}:
    - job:
      displayName: Build ${{ dockerimage.displayName }} Docker Image
      pool:
        vmImage: ubuntu-latest
      steps:
      - checkout: AspxFormsService
      - checkout: Pipelines
      - template: HelmCharts/_Templates/dockerApplicationsNetCore.yml@Pipelines
        parameters:
          repository: ${{ dockerimage.repository }}
          buildContext: ${{ dockerimage.buildContext }}
          dockerFile: ${{ dockerimage.dockerFile }}
          failOnIssues: ${{ dockerimage.failOnIssues }}
          appdll: ${{ dockerimage.appDll }}
          containerRegistry: $(ServiceConnections.ContainerRegistry)
          feedUrl: $(Artifacts.FeedUrl)
          accessToken: $(Artifacts.AccessToken)
          feedUser: $(Artifacts.User)
          snykConnection: $(ServiceConnections.SnykAuthentication)
          snkyOrganizationId: $(snkyOrganizationId)
          buildId: $(Build.BuildId)
          registryName: $(Snyk.RegistryName)
          artifactStagingDirectory: $(Build.ArtifactStagingDirectory)
          calicoApi: $(Calico.API)
          calicoToken: $(Calico.Token)
          azureSubscription: $(ServiceConnections.AzureResourceManager)
          containerRegistryName: $(containerRegistryName)

- ${{ each env in parameters.environments }}:
  - stage:
    displayName: Run ${{ env.displayName }} Helm Chart
    jobs:
    - job:
      displayName: Run ${{ env.displayName }} Helm Chart
      pool:
        vmImage: ubuntu-latest
      steps:
        - checkout: Pipelines

        - task: PowerShell@2
          displayName: Replace Tokens for Values YAML
          inputs:
            targetType: inline
            pwsh: true
            script: |
              ((Get-Content -path ${{ env.valuesFile }} -Raw) -replace '~tlscert~','$(ASPXFormsService-TLSCert)') | Set-Content -Path ${{ env.valuesFile }}
              ((Get-Content -path ${{ env.valuesFile }} -Raw) -replace '~tlskey~','$(ASPXFormsService-TLSKey)') | Set-Content -Path ${{ env.valuesFile }}
              ((Get-Content -path ${{ env.valuesFile }} -Raw) -replace '~appConfigConnectionString~','$(ASPXFormsService-AppConfigConnectionString)') | Set-Content -Path ${{ env.valuesFile }}
              ((Get-Content -path ${{ env.valuesFile }} -Raw) -replace '~buildId~','$(Build.BuildId)') | Set-Content -Path ${{ env.valuesFile }}
              Get-Content -path ${{ env.valuesFile }}

        - task: HelmDeploy@0
          displayName: Run Helm Chart
          continueOnError: ${{ env.continueOnError }}
          inputs:
            connectionType: 'Azure Resource Manager'
            azureSubscriptionEndpoint: $(ServiceConnections.AzureResourceManager)
            azureResourceGroup: $(AKSDeployments.AKSResourceGroup)
            kubernetesCluster: $(kubernetesCluster)
            azureSubscriptionForACR: $(ServiceConnections.AzureResourceManager)
            azureResourceGroupForACR: $(AKSDeployments.AKSResourceGroup)
            azureContainerRegistry: $(ServiceConnections.ContainerRegistry)
            namespace: ${{ env.namespace }}
            chartPath: ${{ env.chartPath }}
            valueFile: ${{ env.valuesFile }}
            releaseName: ${{ env.releaseName }}
            command: 'upgrade'
            waitForExecution: true
            chartType: 'FilePath'
            arguments: ${{ env.helmArgs }}
